timestamps_from_cpp_macros:
  description: |
    The C pre-processor macros `__DATE__`, `__TIME__`, and `__TIMESTAMP__`
    captures the current time, and thus will obviously make a build
    unreproducible.
  url: https://wiki.debian.org/ReproducibleBuilds/TimestampsFromCPPMacros
timestamps_in_documentation_generated_by_doxygen:
  description: |
    If Doxyfile contains HTML_TIMESTAMP = YES, Doxygen will add a
    timestamp to its generated documentation.
  url: https://wiki.debian.org/ReproducibleBuilds/TimestampsInDocumentationGeneratedByDoxygen
timestamps_generated_by_docbook_to_man:
  description: |
    docbook-to-man adds a timestamp at the end of manpages it generates.
  url: https://wiki.debian.org/ReproducibleBuilds/TimestampsGeneratedByDocbookToMan
timestamps_in_documentation_generated_by_man2html:
  description: |
    man2html adds a timestamp at the end of a generated HTML file.
  url: https://wiki.debian.org/ReproducibleBuilds/TimestmapsInDocumentationGeneratedByMan2Html
timestamps_in_dvi_generated_by_latex:
  description: |
    The creation date of the DVI file is the current time.
  url: https://wiki.debian.org/ReproducibleBuilds/TimestampsInDviGeneratedByLaTeX
blacklisted_on_jenkins:
  description: |
    Some packages have been blacklisted not to be tested for build reproducibility on jenkins.debian.net,
    either because their build hangs, spawns processes and doesnt kill them or because they use too much ressources.
debbindiff_runs_forever:
  description: |
    Some packages cannot be analysed by debbindiff due to it running "forever".
    Currently it's killed after 15m but we also tried an hour, didn't help.
    To find affected packages:
      grep -l "debbindiff was killed after running into timeout" *rbuild.log
  url: https://bugs.debian.org/764131
xpi_pack_saves_extra_attributes_in_jar:
  description: |
    xpi-pack, part of mozilla-devscripts, saves extra attributes when creating
    jar files. The fix is pending an upload.
  url: https://wiki.debian.org/ReproducibleBuilds/TimestampsInJarFiles
timestamps_in_php_registry_files:
  description: |
    PHP registry files contain a timestamp in the _lastmodified field.
  url: https://wiki.debian.org/ReproducibleBuilds/TimestampsInPhpRegistryFiles
timestamps_in_maven_pom_files:
  description: |
    Maven writes a timestamp to pom.properties files
  url: https://wiki.debian.org/ReproducibleBuilds/TimestampsInMavenPomProperties
timestamps_in_pe_binaries:
  description: |
    PE binaries contain a timestamp and maybe randomness in an UUID.
  url: https://wiki.debian.org/ReproducibleBuilds/TimestampsInPEBinaries
use_epydoc:
  description: |
    Epydoc will add timestamps to the HTML file it produces. It can also generates
    different class index depending on filesystem ordering. It might also output
    references to object with a memory address.
  url: https://wiki.debian.org/ReproducibleBuilds/EpydocIssues
timestamps_in_source_generated_by_pyqt4_ui:
  description: |
    PyQt4 UI code generator writes a timestamp to the source files it creates.
  url: https://wiki.debian.org/ReproducibleBuilds/TimestampsInSourceGeneratedByPyQt
timestamps_in_python_code_generated_by_cheetah:
  description: |
    Cheetah is embedding two timestamps into generated Python code by default.
    This can be disabled with a compiler flag.
  url: https://wiki.debian.org/ReproducibleBuilds/TimestampsInPythonCodeGeneratedByCheetah
random_order_in_egg_info_top_level_txt:
  description: |
    Python packages have components in `PACKAGE.egg-info/top_level.txt`
    written in a random order.
  url: https://wiki.debian.org/ReproducibleBuilds/EggInfoTopLevelTxt
timestamps_in_documentation_generated_by_yard:
  description: |
    YARD writes timestamps in HTML files it produces.
  url: https://wiki.debian.org/ReproducibleBuilds/TimestampsInDocumentationGeneratedByYard
timestamps_in_beam_files:
  description: |
    Erlang source files compiled by erlc into BEAM files contain timestamps and the build path.
  url: https://wiki.debian.org/ReproducibleBuilds/TimestampsInBeamFiles
shlibs_order_varies:
  description: |
    dh_makeshlibs output is dependent on readdir order.
  url: https://bugs.debian.org/774100
update_icons_order_varies:
  description: |
    dh_icons output is dependent on readdir order.
  url: https://bugs.debian.org/774102
dh_usrlocal_order_varies:
  description: |
    dh_usrlocal output is dependent on readdir order.
  url: https://bugs.debian.org/775020
dh_fixmtimes_runs_before_dh_always_exclude:
  description: |
    When DH_ALWAYS_EXCLUDE is used, directorie's mtimes get modified
    after dh_fixmtimes run. Resulting in unreproducible packages.
  url: https://bugs.debian.org/759886#3
fontforge_reset_modification_time:
  description: |
    When a fontforge script is used, if the font loaded is modified
    in any way, then the font modification time is set to the current
    time.
  url: https://wiki.debian.org/ReproducibleBuilds/TimestampsInFontsGeneratedWithFontForge
not_using_dh_builddeb:
  description: |
    We currently adjust the file mtimes in dh_builddeb. Packages which
    calls `dpkg --build` directly should have a prior call to:
    `BUILD_DATE := $(shell dpkg-parsechangelog | sed -n -e 's/^Date: //p')`
    and
    `find debian/tmp -depth -newermt '$(BUILD_DATE)' -print0 | \
         xargs -0r touch --no-dereference --date='$(BUILD_DATE)'`
    Another option is to convert the build system to `dh`.
  url: https://wiki.debian.org/ReproducibleBuilds/Howto#Members_of_control.tar_and_data.tar_have_varying_mtimes
timestamps_in_gzip_headers:
  description: |
    gzip stores a timestamp by default in its header.
  url: https://wiki.debian.org/ReproducibleBuilds/TimestampsInGzipHeaders
timestamps_in_png:
  description: |
    PNG can capture build time with the tIME chunk or custom keywords.
  url: https://wiki.debian.org/ReproducibleBuilds/TimestampsInPNG
timestamps_in_static_libraries:
  description: |
    .a files are ar archives. By default, they will contain a timestamp for
    each member (.o) and for the function index.
  url: https://wiki.debian.org/ReproducibleBuilds/TimestampsInStaticLibraries
timestamps_in_tarball:
  description: |
    Tarball capture build time in mtime of its members.
  url: https://wiki.debian.org/ReproducibleBuilds/TimestampsInTarball
timestamps_in_documentation_generated_by_javadoc:
  description: |
    javadoc will add timestamps to the HTML file it produces.
  url: https://wiki.debian.org/ReproducibleBuilds/TimestampsInDocumentationGeneratedByJavadoc
timestamps_in_jar:
  description: |
    jar (Java Archive) file stores mtimes. Most often of files generated during
    the build.
  url: https://wiki.debian.org/ReproducibleBuilds/TimestampsInJarFiles
timestamps_in_zip:
  description: |
    Zip archives stores mtimes. Most often of files generated during
    the build.
  url: https://wiki.debian.org/ReproducibleBuilds/TimestampsInZip
timestamps_in_documentation_generated_by_groff:
  description: |
    groff will add a timestamps to documentation it produces.
  url: https://wiki.debian.org/ReproducibleBuilds/TimestampsInDocumentationGeneratedByGroff
timestamps_in_pdf_generated_by_latex:
  description: |
    PDF files generated with pdftex and pdflatex will contain CreationDate and
    ModDate set to the current date and time.
  url: https://wiki.debian.org/ReproducibleBuilds/TimestampsInPDFGeneratedByLaTeX
timestamps_in_documentation_generated_by_htmldoc:
  description: |
    PDF files generated with htmldoc will contain CreationDate set to the current
    date and time.
  url: https://wiki.debian.org/ReproducibleBuilds/TimestmapsInDocumentationGeneratedByHtmldoc
pdf_created_by_ghostscript:
  description: |
    PDF files created by Ghostscript contain timestamps and ids.
  url: https://wiki.debian.org/ReproducibleBuilds/PdfGeneratedByGhostscript#preview
serial_numbers_in_ogg:
  description: |
    Ogg streams must include unique serial numbers. By default oggenc includes
    random serial numbers in the header, which are seeded by the current time
    and the pid.
  url: https://wiki.debian.org/ReproducibleBuilds/OggSerialNumbers
timestamps_in_pdf_generated_by_apache_fop:
  description: |
    PDF files generated with Apache FOP will contain CreationDate and
    ModDate set to the current date and time.
  url: https://wiki.debian.org/ReproducibleBuilds/TimestampsInPDFGeneratedByApacheFOP
